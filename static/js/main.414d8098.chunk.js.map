{"version":3,"sources":["assed/react_logo.png","components/style.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Style","styled","div","props","matches","click","Nav","useMediaQuery","useState","setClick","src","require","alt","onClick","icon","faAlignJustify","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,wC,uhCCEpC,IAAMC,E,MAAMC,EAAOC,IAAR,KAaZ,SAAAC,GACF,OAAIA,EAAMC,QACF,mCAIGD,EAAME,MACT,6UAcE,8UAkCG,SAAAF,GAAK,OAAIA,EAAME,MAAO,OAAb,WAKT,SAAAF,GAAK,OAAIA,EAAME,MAAO,OAAb,WAKT,SAAAF,GAAK,OAAIA,EAAME,MAAO,OAAb,WAKT,SAAAF,GAAK,OAAIA,EAAME,MAAO,OAAb,WAQf,SAAAF,GAAK,OAAIA,EAAMC,QAAS,OAAS,kB,wBCvF/BE,EAAM,WACf,IAAMF,EAAUG,YAAc,qBADT,EAEKC,oBAAS,GAFd,mBAEdH,EAFc,KAEPI,EAFO,KAGrB,OACI,oCACA,kBAACT,EAAD,CAAOI,QAASA,EAASC,MAAOA,GAC5B,iCACG,yBAAKK,IAAKC,EAAQ,IAA4BC,IAAI,UAClD,yBAAKC,QAAS,WAAMJ,GAAUJ,KAC3B,kBAAC,IAAD,CAAiBS,KAAMC,OAEzB,4BACI,oCACA,qCACA,uCACA,0C,MCRLC,MARf,WACE,OACE,yBAAKC,UAAU,OACV,kBAAC,EAAD,QCIWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.414d8098.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react_logo.580ffd26.png\";","import styled from \"styled-components\";\r\n\r\nexport const Style=styled.div`\r\nbackground-color: rgb(75, 75, 75);\r\nmin-width:100%;\r\nheight:80px;\r\nsection {\r\n    width:80%;\r\n    height:80px;\r\n    margin:auto;\r\n    display:flex;\r\n    justify-content:space-between;\r\n    align-items:center;\r\n}\r\nul {\r\n    ${props => {\r\n    if (props.matches) {\r\n      return `\r\n        display: flex;\r\n\r\n    `\r\n    } else if (props.click) {\r\n      return `\r\n        display:flex;\r\n        flex-direction: column;\r\n        height: 250px;\r\n        min-width:100%;\r\n        padding-left:0;\r\n        position: absolute;\r\n        top:55px;\r\n        right: 0;\r\n        background-color: rgb(75, 75, 75);\r\n        transition: transform 0.5s ease-in;\r\n        transform: translateX(200%);\r\n    `\r\n    } else {\r\n        return `\r\n        display:flex;\r\n        flex-direction: column;\r\n        height: 250px;\r\n        min-width:100%;\r\n        padding-left:0;\r\n        position: absolute;\r\n        top:55px;\r\n        right: 0;\r\n        background-color: rgb(75, 75, 75);\r\n        transform: translateX(0%);\r\n        transition: transform 0.5s ease-in;\r\n    `\r\n    }\r\n}};\r\n    list-style:none;\r\n}\r\n\r\n@keyframes li {\r\n from{\r\n  padding:20px;\r\n  color:#fff;\r\n  opacity:0; \r\n  transform:translateX(200%); \r\n }\r\n to{\r\n  padding:20px;\r\n  color:#fff;\r\n  opacity:1; \r\n  transform:translateX(0%); \r\n }\r\n}\r\n\r\nli:nth-child(1) {\r\n    animation: ${props => props.click ?\"none\" : `li 1s` };\r\n    padding:20px;\r\n    color:#fff;\r\n}\r\nli:nth-child(2) {\r\n    animation: ${props => props.click ?\"none\" : `li 2s` };\r\n    padding:20px;\r\n    color:#fff;\r\n}\r\nli:nth-child(3) {\r\n    animation: ${props => props.click ?\"none\" : `li 3s` };\r\n    padding:20px;\r\n    color:#fff;\r\n}\r\nli:nth-child(4) {\r\n    animation: ${props => props.click ?\"none\" : `li 4s` };\r\n    padding:20px;\r\n    color:#fff;\r\n}\r\nimg {\r\n    width:80px;\r\n}\r\ndiv {\r\n display:${props => props.matches ?\"none\" : \"inline-block\"};\r\n color:#fff;\r\n font-size:30px;\r\n}\r\n`","import React,{useState} from 'react';\r\nimport {Style} from \"./style\";\r\nimport { faAlignJustify } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport const Nav = () => {\r\n    const matches = useMediaQuery('(min-width:550px)');\r\n    const [click, setClick] = useState(false);\r\n    return (\r\n        <>\r\n        <Style matches={matches} click={click}>\r\n            <section>               \r\n               <img src={require(\"../assed/react_logo.png\")} alt=\"error\"/>\r\n               <div onClick={() =>{setClick(!click)}}>\r\n                  <FontAwesomeIcon icon={faAlignJustify} />\r\n               </div>\r\n                <ul>\r\n                    <li>Home</li>\r\n                    <li>About</li>\r\n                    <li>Contact</li>\r\n                    <li>Helps</li>\r\n                </ul>\r\n            </section>\r\n        </Style>     \r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport {Nav} from './components/index';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <Nav/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}